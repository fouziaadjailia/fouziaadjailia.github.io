---
---

<section id="contact" class="section">
  <div class="container">
    <h2 class="section-title">Get In Touch</h2>
    <div class="contact-content">
      <div class="contact-info">
        <h3>Let's Connect</h3>
        <p class="contact-description">
          I'm always interested in discussing AI research, collaboration opportunities, speaking engagements, or innovative projects. Feel free to reach out!
        </p>
        
        <div class="contact-methods">
          <div class="contact-method">
            <div class="contact-icon">ðŸ“§</div>
            <div class="contact-details">
              <h4>Email</h4>
              <p>fouzia.adjailia@gmail.com</p>
            </div>
          </div>
        </div>

        <div class="social-links">
          <h4>Follow My Work</h4>
          <div class="social-buttons">
            <a href="https://www.linkedin.com/in/fouzia-adjailia-phd-4a7555a7/" target="_blank" rel="noopener noreferrer" class="btn btn-secondary">
              LinkedIn
            </a>
            <a href="https://github.com/fouziaadjailia" target="_blank" rel="noopener noreferrer" class="btn btn-secondary">
              GitHub
            </a>
            <a href="https://scholar.google.com/citations?hl=en&user=iKnAHNEAAAAJ&view_op=list_works&sortby=pubdate" target="_blank" rel="noopener noreferrer" class="btn btn-secondary">
              Google Scholar
            </a>
          </div>
        </div>
      </div>

      <div class="contact-form">
        <h3>Send a Message</h3>
        <form id="contactForm">
          <div class="form-group">
            <label for="name">Name *</label>
            <input type="text" id="name" name="name" required>
            <span class="error-message" id="nameError"></span>
          </div>
          
          <div class="form-group">
            <label for="email">Email *</label>
            <input type="email" id="email" name="email" required>
            <span class="error-message" id="emailError"></span>
          </div>
          
          <div class="form-group">
            <label for="subject">Subject *</label>
            <input type="text" id="subject" name="subject" required>
            <span class="error-message" id="subjectError"></span>
          </div>
          
          <div class="form-group">
            <label for="message">Message *</label>
            <textarea id="message" name="message" rows="5" required></textarea>
            <span class="error-message" id="messageError"></span>
          </div>
          
          <button type="submit" class="btn btn-primary" id="submitBtn">
            <span class="btn-text">Send Message</span>
            <span class="btn-loading" style="display: none;">Sending...</span>
          </button>
        </form>
        
        <div id="successMessage" class="success-message" style="display: none;">
          <div class="success-icon">âœ“</div>
          <h4>Message Sent Successfully!</h4>
          <p>Thank you for reaching out. I'll get back to you as soon as possible.</p>
        </div>

        <div id="errorMessage" class="error-message-box" style="display: none;">
          <div class="error-icon">âš </div>
          <h4>Unable to Send Message</h4>
          <p>Please send your message directly to <a href="mailto:fouzia.adjailia@gmail.com">fouzia.adjailia@gmail.com</a></p>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .contact-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    max-width: 1000px;
    margin: 0 auto;
  }

  .contact-info h3,
  .contact-form h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1.5rem;
  }

  .contact-description {
    color: #4b5563;
    line-height: 1.7;
    margin-bottom: 2rem;
  }

  .contact-methods {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .contact-method {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .contact-icon {
    font-size: 1.5rem;
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #3B82F6 0%, #8B5CF6 100%);
    border-radius: 50%;
  }

  .contact-details h4 {
    font-size: 1rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.25rem;
  }

  .contact-details p {
    color: #6b7280;
  }

  .social-links {
    margin-top: 2rem;
  }

  .social-links h4 {
    font-size: 1rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 1rem;
  }

  .social-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #3B82F6;
  }

  .form-group input.error,
  .form-group textarea.error {
    border-color: #ef4444;
  }

  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }

  .error-message {
    display: block;
    color: #ef4444;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    min-height: 1.25rem;
  }

  .btn-loading {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .btn-loading::after {
    content: '';
    width: 1rem;
    height: 1rem;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .success-message {
    background: #f0fdf4;
    border: 2px solid #22c55e;
    border-radius: 0.75rem;
    padding: 2rem;
    text-align: center;
    margin-top: 1rem;
  }

  .success-icon {
    width: 3rem;
    height: 3rem;
    background: #22c55e;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: bold;
    margin: 0 auto 1rem;
  }

  .success-message h4 {
    color: #166534;
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .success-message p {
    color: #15803d;
  }

  .error-message-box {
    background: #fef2f2;
    border: 2px solid #ef4444;
    border-radius: 0.75rem;
    padding: 2rem;
    text-align: center;
    margin-top: 1rem;
  }

  .error-icon {
    width: 3rem;
    height: 3rem;
    background: #ef4444;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: bold;
    margin: 0 auto 1rem;
  }

  .error-message-box h4 {
    color: #991b1b;
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .error-message-box p {
    color: #dc2626;
  }

  .error-message-box a {
    color: #dc2626;
    text-decoration: underline;
    font-weight: 500;
  }

  .error-message-box a:hover {
    color: #991b1b;
  }

  @media (max-width: 768px) {
    .contact-content {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .social-buttons {
      flex-direction: column;
    }

    .contact-method {
      flex-direction: column;
      text-align: center;
      gap: 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm');
    const submitBtn = document.getElementById('submitBtn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');

    // Form validation
    function validateField(field, errorElement, validationFn, errorMessage) {
      const isValid = validationFn(field.value);
      if (!isValid) {
        field.classList.add('error');
        errorElement.textContent = errorMessage;
        return false;
      } else {
        field.classList.remove('error');
        errorElement.textContent = '';
        return true;
      }
    }

    function validateEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    function validateRequired(value) {
      return value.trim().length > 0;
    }

    // Real-time validation
    const nameField = document.getElementById('name');
    const emailField = document.getElementById('email');
    const subjectField = document.getElementById('subject');
    const messageField = document.getElementById('message');

    nameField.addEventListener('blur', () => {
      validateField(nameField, document.getElementById('nameError'), validateRequired, 'Name is required');
    });

    emailField.addEventListener('blur', () => {
      if (!validateRequired(emailField.value)) {
        validateField(emailField, document.getElementById('emailError'), validateRequired, 'Email is required');
      } else {
        validateField(emailField, document.getElementById('emailError'), validateEmail, 'Please enter a valid email address');
      }
    });

    subjectField.addEventListener('blur', () => {
      validateField(subjectField, document.getElementById('subjectError'), validateRequired, 'Subject is required');
    });

    messageField.addEventListener('blur', () => {
      validateField(messageField, document.getElementById('messageError'), validateRequired, 'Message is required');
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Validate all fields
      const isNameValid = validateField(nameField, document.getElementById('nameError'), validateRequired, 'Name is required');
      const isEmailValid = validateField(emailField, document.getElementById('emailError'), validateEmail, 'Please enter a valid email address') && validateRequired(emailField.value);
      const isSubjectValid = validateField(subjectField, document.getElementById('subjectError'), validateRequired, 'Subject is required');
      const isMessageValid = validateField(messageField, document.getElementById('messageError'), validateRequired, 'Message is required');

      if (!isNameValid || !isEmailValid || !isSubjectValid || !isMessageValid) {
        return;
      }

      // Show loading state
      submitBtn.disabled = true;
      btnText.style.display = 'none';
      btnLoading.style.display = 'flex';

      // Hide any previous messages
      successMessage.style.display = 'none';
      errorMessage.style.display = 'none';

      try {
        // Prepare form data
        const formData = {
          name: nameField.value.trim(),
          email: emailField.value.trim(),
          subject: subjectField.value.trim(),
          message: messageField.value.trim()
        };

        // Create mailto link as fallback
        const mailtoLink = `mailto:fouzia.adjailia@gmail.com?subject=${encodeURIComponent(formData.subject)}&body=${encodeURIComponent(`Name: ${formData.name}\nEmail: ${formData.email}\n\nMessage:\n${formData.message}`)}`;

        // Try to submit via a form service (you'll need to replace this with your actual endpoint)
        // For now, we'll simulate a form submission and provide the mailto fallback
        
        // Simulate form processing delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Since we don't have a valid form endpoint, we'll open the mailto link
        window.location.href = mailtoLink;
        
        // Show success message
        form.style.display = 'none';
        successMessage.style.display = 'block';
        
        // Reset form after delay
        setTimeout(() => {
          form.reset();
          form.style.display = 'block';
          successMessage.style.display = 'none';
          
          // Reset button state
          submitBtn.disabled = false;
          btnText.style.display = 'inline';
          btnLoading.style.display = 'none';
        }, 3000);

      } catch (error) {
        console.error('Error sending message:', error);
        
        // Show error message with mailto fallback
        form.style.display = 'none';
        errorMessage.style.display = 'block';
        
        // Reset form after delay
        setTimeout(() => {
          form.style.display = 'block';
          errorMessage.style.display = 'none';
          
          // Reset button state
          submitBtn.disabled = false;
          btnText.style.display = 'inline';
          btnLoading.style.display = 'none';
        }, 5000);
      }
    });
  });
</script>